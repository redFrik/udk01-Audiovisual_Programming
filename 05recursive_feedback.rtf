{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red96\green96\blue96;
\red0\green0\blue191;\red0\green115\blue0;}
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs40 \cf2 //udk may-jul 2009 / f@fredrikolofsson.com\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //090709\cf3 \
\
\
\cf2 //----------------------\cf3 \
\
\cf4 "~/D*"\cf3 .pathMatch;	\cf2 //home directory - all files and folders beginning with D\cf3 \
\cf4 "sounds/*"\cf3 .pathMatch.scramble; \cf2 //sounds directory inside sc folder\cf3 \
\
[1, 2, 3, 4, 5].scramble	\cf2 //random order\cf3 \
[1, 2, 3, 4, 5].choose		\cf2 //pick one at random\cf3 \
[10, 1, 2, 3, 4, 5].sort\
\
[1, 2, 3, 4, 5]+10				\cf2 //math operations on arrays\cf3 \
[1, 2, 3, 4, 5].round(4)\
[1, 2, 3, 4, 5]/0.01\
\
[1, 2, 3]*[10, 20, 30]\
\
\
\
\cf2 //----------------------\cf3 \
s.boot\
\
\cf2 //--record sound as a soundfile\cf3 \
(\
\cf5 SynthDef\cf3 (\cf6 \\testrec\cf3 , \{\
	\cf5 var\cf3  src= \cf5 RLPF\cf3 .ar(\cf5 WhiteNoise\cf3 .ar(0.5));\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src));\
\}).send(s);\
)\
a= \cf5 Synth\cf3 (\cf6 \\testrec\cf3 )	\cf2 //start test sound to record\cf3 \
\
\cf2 //now press 'prepare rec' in the localhost server window\cf3 \
\cf2 //then 'record' and 'stop'\cf3 \
\cf2 //your file will end up in ~/Music/SuperCollider Recordings\cf3 \
a.free	\cf2 //stop the test sound\cf3 \
\
\
\cf2 //or do it programmatically from the language\cf3 \
s.prepareForRecord\
a= \cf5 Synth\cf3 (\cf6 \\testrec\cf3 )	\cf2 //start test sound to record\cf3 \
s.record\
s.stopRecording\
a.free\
\
\cf2 //or use a routine to start/stop rec with a specific length\cf3 \
(\
\cf5 Routine\cf3 (\{\
	s.prepareForRecord;	\cf2 //prepare the file\cf3 \
	1.wait;\
	a= \cf5 Synth\cf3 (\cf6 \\testrec\cf3 );	\cf2 //start the sound\cf3 \
	s.record;						\cf2 //start the recording\cf3 \
	4.wait;						\cf2 //record 4 seconds long\cf3 \
	s.stopRecording;			\cf2 //stop recording\cf3 \
	a.free;\
\}).play;\
)\
\
\cf2 //look in ~/Music/SuperCollider Recordings for your recorded files\cf3 \
\
\
\
\
\cf2 //----------------------\cf3 \
\
\cf2 //--first we look at Pen.scale, Pen.rotate, Pen.translate\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "scaleRotateTranslate"\cf3 , \cf5 Rect\cf3 (200, 200, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .black;\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.5);\cf2 //offset or shift whole coordinate system\cf3 \
	\cf5 Pen\cf3 .scale(0.75, 0.75);	\cf2 //scale 75% width and height\cf3 \
	\cf5 Pen\cf3 .rotate(0.5*pi);		\cf2 //between 0 and 2pi (here 0.5*pi is 90degree rotation)\cf3 \
	\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 50, 30));\
\};\
win.front;\
)\
\
\
\
\cf2 //--recursion\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursive"\cf3 , \cf5 Rect\cf3 (200, 200, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
r= \{\cf5 |i|\cf3 \
	if(i>0, \{	\cf2 //all recursive functions should have a stop condition\cf3 \
		\cf5 Pen\cf3 .scale(0.95, 0.95);	\cf2 //scale 95% width and height\cf3 \
		\cf5 Pen\cf3 .rotate(0.05*pi);		\cf2 //between 0 and 2pi\cf3 \
		\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 150, 130));\
		r.value(i-1);	\cf2 //here we call r itself\cf3 \
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .black;\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.5);\cf2 //offset or shift whole coordinate system\cf3 \
	r.value(100);		\cf2 //call recursive function with argument 100\cf3 \
\};\
win.front;\
)\
\
\
\
\cf2 //--recursion2\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursive2"\cf3 , \cf5 Rect\cf3 (200, 200, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
r= \{\cf5 |i|\cf3 \
	if(i>0, \{	\cf2 //all recursive functions should have a stop condition\cf3 \
		\cf5 Pen\cf3 .scale(0.9, 0.95);\
		\cf5 Pen\cf3 .rotate(0.05*pi);\
		if(i%2==0, \{		\cf2 //seperate even and odd i using modulo\cf3 \
			\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .blue;\
		\}, \{\
			\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .red;\
		\});\
		\cf5 Pen\cf3 .fillOval(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 200, 180));\
		r.value(i-1);	\cf2 //here we call r itself\cf3 \
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .black;\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.5);\cf2 //offset or shift whole coordinate system\cf3 \
	r.value(100);\
\};\
win.front;\
)\
\
\
\cf2 // % means modulo\cf3 \
\
0%2	\cf2 //	= 0\cf3 \
1%2	\cf2 // = 1\cf3 \
2%2	\cf2 // = 0\cf3 \
3%2	\cf2 // = 1\cf3 \
4%2	\cf2 // = 0\cf3 \
5%2	\cf2 // = 1\cf3 \
\
0%3	\cf2 // = 0\cf3 \
1%3	\cf2 // = 1\cf3 \
2%3	\cf2 // = 2\cf3 \
3%3	\cf2 // = 0\cf3 \
4%3	\cf2 // = 1\cf3 \
5%3	\cf2 // = 2\cf3 \
\
\
\
\cf2 //--recursion3\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursive3"\cf3 , \cf5 Rect\cf3 (200, 200, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
r= \{\cf5 |i|\cf3 \
	if(i>0, \{	\cf2 //all recursive functions should have a stop condition\cf3 \
		\cf5 Pen\cf3 .scale(0.98, 0.98);\
		\cf5 Pen\cf3 .rotate(0.01*2pi);\
		\cf2 //--do 1 of 3 different things for each level/depth\cf3 \
		if(i%3==0, \{\
			\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .blue(0.5, 1-(i/100));\
			\cf5 Pen\cf3 .fillOval(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 200, 180));\
		\});\
		if(i%3==1, \{\
			\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .red;\
			\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (100, 0), 200, 180));\
		\});\
		if(i%3==2, \{\
			\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .green;\
			\cf5 Pen\cf3 .line(\cf5 Point\cf3 (0, 0), \cf5 Point\cf3 (330, 330));\
			\cf5 Pen\cf3 .stroke;\
		\});\
		r.value(i-1);	\cf2 //here we call r itself\cf3 \
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .black;\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.5);\
	r.value(100);\
\};\
win.front;\
)\
\
\
\
\cf2 //--recursion4 - with animation\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursive4"\cf3 , \cf5 Rect\cf3 (200, 200, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
r= \{\cf5 |i|\cf3 \
	if(i>0, \{	\cf2 //all recursive functions should have a stop condition\cf3 \
		\cf5 Pen\cf3 .scale(0.99, 0.99);\
		\cf5 Pen\cf3 .rotate(sin(cnt*0.001));\
		\cf2 //only draw something every second level/depth\cf3 \
		if(i%4==0, \{\
			\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .white;\
			\cf5 Pen\cf3 .fillOval(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 250, 230));\
		\});\
		if(i%4==2, \{\
			\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .black;\
			\cf5 Pen\cf3 .fillOval(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 250, 230));\
		\});\
		r.value(i-1);	\cf2 //here we call r itself\cf3 \
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .black;\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.5);\
	r.value(100);\
	cnt= cnt+1;\
\};\
\cf5 Routine\cf3 (\{while(\{win.isClosed.not\}, \{usr.refresh; (1/25).wait\})\}).play(\cf5 AppClock\cf3 );\
win.front;\
)\
\
\
\
\cf2 //--recursion5 - simple example again\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursion5"\cf3 , \cf5 Rect\cf3 (100, 400, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .grey;\
r= \{\cf5 |index|\cf3 \
	if(index>0, \{\
		\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .red(1, 0.7);\
		\cf5 Pen\cf3 .fillOval(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 50, 50));\
		\cf5 Pen\cf3 .rotate(sin(cnt*0.1));\
		\cf5 Pen\cf3 .translate(40, 40);\
		\cf5 Pen\cf3 .scale(0.9, 0.9);\
		r.value(index-1);\
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.5);\
	r.value(10);\
	cnt= cnt+1;\
\};\
\cf5 Routine\cf3 (\{while(\{win.isClosed.not\}, \{usr.refresh; (1/25).wait\})\}).play(\cf5 AppClock\cf3 );\
win.front;\
)\
\
\
\cf2 //----------------------\cf3 \
\
\cf2 //--feedback - phasemodulation\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed00"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 LocalIn\cf3 .ar(1);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq, fb*2pi, amp*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed00"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed00"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed00"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed00"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed00"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\
\
\cf2 //--feedback - frequencymodulation\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed01"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 LocalIn\cf3 .ar(1);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq+(fb*freq), 0, amp*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed01"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed01"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed01"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed01"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed01"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\cf5 Synth\cf3 (\cf4 "feed01"\cf3 , [\cf6 \\freq\cf3 , 300, \cf6 \\amp\cf3 , 0.8])\
\
\
\
\cf2 //--feedback - amplitudemodulation\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed02"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 LocalIn\cf3 .ar(1);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq, 0, amp+fb*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed02"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed02"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed02"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed02"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed02"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\cf5 Synth\cf3 (\cf4 "feed02"\cf3 , [\cf6 \\freq\cf3 , 300, \cf6 \\amp\cf3 , 0.8])\
\
\
\
\cf2 //--feedback - amplitudemodulation with delay\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed03"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 DelayN\cf3 .ar(\cf5 LocalIn\cf3 .ar(1), 0.05, 0.05);\cf2 //delaying the local signal\cf3 \
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq, 0, amp+fb*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed03"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed03"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed03"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed03"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed03"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\cf5 Synth\cf3 (\cf4 "feed03"\cf3 , [\cf6 \\freq\cf3 , 300, \cf6 \\amp\cf3 , 0.8])\
\
\
\cf2 //--feedback - frequencymodulation with delay\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed04"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 DelayN\cf3 .ar(\cf5 LocalIn\cf3 .ar(1), 0.05, 0.05);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq+(fb*freq), 0, amp*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed04"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed04"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed04"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed04"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed04"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\cf5 Synth\cf3 (\cf4 "feed04"\cf3 , [\cf6 \\freq\cf3 , 300, \cf6 \\amp\cf3 , 0.8])\
\
\
\cf2 //--feedback - phasemodulation with delay\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed05"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 DelayN\cf3 .ar(\cf5 LocalIn\cf3 .ar(1), 0.05, 0.05);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq, fb*2pi, amp*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed05"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed05"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed05"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed05"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed05"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\cf5 Synth\cf3 (\cf4 "feed05"\cf3 , [\cf6 \\freq\cf3 , 300, \cf6 \\amp\cf3 , 0.8])\
\
\
\
\cf2 //--feedback - phasemodulation with delay with filter\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed06"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	\cf2 //--please try with BPF, LPF, HPF below\cf3 \
	fb= \cf5 BPF\cf3 .ar(\cf5 DelayN\cf3 .ar(\cf5 LocalIn\cf3 .ar(1), 0.05, 0.05), 600);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq, fb*2pi, amp*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed06"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed06"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed06"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed06"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed06"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\cf5 Synth\cf3 (\cf4 "feed06"\cf3 , [\cf6 \\freq\cf3 , 300, \cf6 \\amp\cf3 , 0.8])\
\
\
\
\cf2 //--feedback - phasemodulation with delay with filter with pitchshift\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed07"\cf3 , \{\cf5 |freq= 400, amp= 0.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 PitchShift\cf3 .ar(\cf5 BPF\cf3 .ar(\cf5 DelayN\cf3 .ar(\cf5 LocalIn\cf3 .ar(1), 0.05, 0.05), 600), 0.1, 1.1);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(0.1, 2), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq, fb*2pi, amp*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed07"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed07"\cf3 , [\cf6 \\freq\cf3 , 800])\
\cf5 Synth\cf3 (\cf4 "feed07"\cf3 , [\cf6 \\freq\cf3 , 1800])\
\cf5 Synth\cf3 (\cf4 "feed07"\cf3 , [\cf6 \\freq\cf3 , 700, \cf6 \\amp\cf3 , 0.3])\
\cf5 Synth\cf3 (\cf4 "feed07"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\amp\cf3 , 0.5])\
\cf5 Synth\cf3 (\cf4 "feed07"\cf3 , [\cf6 \\freq\cf3 , 300, \cf6 \\amp\cf3 , 0.8])\
\
\
\
\cf2 //--feedback - mixing\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed08"\cf3 , \{\cf5 |freq= 400, amp= 0.1, atk= 0.1, rel= 2, delayTime= 0.05, cutoff= 600, pitch= 1.1|\cf3 \
	\cf5 var\cf3  env, src, fb;\
	fb= \cf5 PitchShift\cf3 .ar(\cf5 LPF\cf3 .ar(\cf5 DelayN\cf3 .ar(\cf5 LocalIn\cf3 .ar(1), 1, delayTime), cutoff), 0.1, pitch);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(atk, rel), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(freq, 0, amp*env)+fb;\cf2 //mixing in the feedback signal\cf3 \
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\cf2 //output to speakers\cf3 \
	\cf5 LocalOut\cf3 .ar(src);	\cf2 //output to localin\cf3 \
\}).send(s);\
)\
\cf5 Synth\cf3 (\cf4 "feed08"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed08"\cf3 , [\cf6 \\freq\cf3 , 800, \cf6 \\atk\cf3 , 0.001, \cf6 \\rel\cf3 , 1, \cf6 \\amp\cf3 , 0.6])\
\cf5 Synth\cf3 (\cf4 "feed08"\cf3 , [\cf6 \\freq\cf3 , 800, \cf6 \\atk\cf3 , 0.001, \cf6 \\rel\cf3 , 1, \cf6 \\amp\cf3 , 0.6, \cf6 \\pitch\cf3 , 2])\
\cf5 Synth\cf3 (\cf4 "feed08"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\atk\cf3 , 0.001, \cf6 \\rel\cf3 , 1, \cf6 \\amp\cf3 , 0.6, \cf6 \\pitch\cf3 , 2, \cf6 \\cutoff\cf3 , 900])\
\cf5 Synth\cf3 (\cf4 "feed08"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\atk\cf3 , 0.001, \cf6 \\rel\cf3 , 1, \cf6 \\amp\cf3 , 0.6, \cf6 \\pitch\cf3 , 2, \cf6 \\cutoff\cf3 , 400, \cf6 \\delayTime\cf3 , 0.1])\
\cf5 Synth\cf3 (\cf4 "feed08"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\atk\cf3 , 1, \cf6 \\rel\cf3 , 4, \cf6 \\amp\cf3 , 0.3, \cf6 \\pitch\cf3 , 0.8, \cf6 \\cutoff\cf3 , 800, \cf6 \\delayTime\cf3 , 0.0007])\
\
\
\cf2 //----------------------\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursion6"\cf3 , \cf5 Rect\cf3 (100, 400, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
r= \{\cf5 |index|\cf3 \
	if(index>0, \{\
		\cf5 Pen\cf3 .translate(0, -40);\
		\cf5 Pen\cf3 .scale(0.8, 0.9);\
		\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //branch\cf3 \
		\cf5 Pen\cf3 .use\{		\cf2 //like push/pop\cf3 \
			\cf5 Pen\cf3 .rotate(0.2);\
			\cf5 Pen\cf3 .translate(0, -15);\
			\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //leaf1\cf3 \
			r.value(index-1);\
		\};\
		\cf5 Pen\cf3 .use\{		\cf2 //like push/pop\cf3 \
			\cf5 Pen\cf3 .rotate(-0.2);\
			\cf5 Pen\cf3 .translate(0, -15);\
			\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //leaf2\cf3 \
			r.value(index-1);\
		\};\
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.9);\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .grey(0.2, 0.8);\
	r.value(10);\
\};\
win.front;\
)\
\
\
\cf2 //--adding some random values makes it look more 'natural'\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursion7"\cf3 , \cf5 Rect\cf3 (100, 400, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
r= \{\cf5 |index|\cf3 \
	if(index>0, \{\
		\cf5 Pen\cf3 .translate(0, -40+3.rand2);\
		\cf5 Pen\cf3 .scale(0.8+0.1.rand2, 0.9+0.2.rand2);\
		\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //branch\cf3 \
		\cf5 Pen\cf3 .use\{		\cf2 //like push/pop\cf3 \
			\cf5 Pen\cf3 .rotate(0.2+0.01.rand2);\
			\cf5 Pen\cf3 .translate(0, -15+2.rand2);\
			\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //leaf1\cf3 \
			r.value(index-1);\
		\};\
		\cf5 Pen\cf3 .use\{		\cf2 //like push/pop\cf3 \
			\cf5 Pen\cf3 .rotate(-0.2+0.01.rand2);\
			\cf5 Pen\cf3 .translate(0, -15+2.rand2);\
			\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //leaf2\cf3 \
			r.value(index-1);\
		\};\
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .translate(width*0.5, height);\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .grey(0.2, 0.8);\
	r.value(10);\
\};\
win.front;\
)\
\
\
\cf2 //--animation\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursion8"\cf3 , \cf5 Rect\cf3 (100, 400, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .white;\
r= \{\cf5 |index|\cf3 \
	if(index>0, \{\
		\cf5 Pen\cf3 .translate(0, -40);\
		\cf5 Pen\cf3 .rotate(sin(cnt*0.08)*0.1);\
		\cf5 Pen\cf3 .scale(0.8+(sin(cnt*0.01)*0.1), 0.9);\
		\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //branch\cf3 \
		\cf5 Pen\cf3 .use\{		\cf2 //like push/pop\cf3 \
			\cf5 Pen\cf3 .rotate(0.2);\
			\cf5 Pen\cf3 .translate(0, -15);\
			\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //leaf1\cf3 \
			r.value(index-1);\
		\};\
		\cf5 Pen\cf3 .use\{		\cf2 //like push/pop\cf3 \
			\cf5 Pen\cf3 .rotate(-0.2);\
			\cf5 Pen\cf3 .translate(0, -15);\
			\cf5 Pen\cf3 .strokeRect(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 2, 30));\cf2 //leaf2\cf3 \
			r.value(index-1);\
		\};\
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .translate(width*0.5, height*0.9);\
	\cf5 Pen\cf3 .strokeColor= \cf5 Color\cf3 .blue(1, 0.8);\
	r.value(8);\
	cnt= cnt+1;\
\};\
\cf5 Routine\cf3 (\{while(\{win.isClosed.not\}, \{usr.refresh; (1/25).wait\})\}).play(\cf5 AppClock\cf3 );\
win.front;\
)\
\
\
\cf2 //--grass?\cf3 \
(\
\cf5 var\cf3  win, usr, width= 500, height= 500, cnt= 0;\
win= \cf5 Window\cf3 (\cf4 "recursion9"\cf3 , \cf5 Rect\cf3 (100, 400, width, height));\
usr= \cf5 UserView\cf3 (win, \cf5 Rect\cf3 (0, 0, width, height));\
usr.background= \cf5 Color\cf3 .grey;\
r= \{\cf5 |index|\cf3 \
	if(index>0, \{\
		\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .grey(0.6, 0.6);\
		\cf5 Pen\cf3 .fillOval(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 20, 20));\cf2 //branch\cf3 \
		\cf5 Pen\cf3 .use\{		\cf2 //like push/pop\cf3 \
			\cf5 Pen\cf3 .fillColor= \cf5 Color\cf3 .white;\
			\cf5 Pen\cf3 .scale(0.95, 0.95);\
			\cf5 Pen\cf3 .rotate(sin(cnt+index*0.1)*0.04);\
			\cf5 Pen\cf3 .translate(0, -20);\
			\cf5 Pen\cf3 .fillOval(\cf5 Rect\cf3 .aboutPoint(\cf5 Point\cf3 (0, 0), 5, 5));\cf2 //leaf1\cf3 \
			r.value(index-1);\
		\};\
	\});\
\};\
usr.drawFunc= \{\
	\cf5 Pen\cf3 .translate(width*0.16, height*0.9);\
	10.do\{\cf5 |i|\cf3 \
		r.value(20);\
		\cf5 Pen\cf3 .translate(37, 0);\
	\};\
	cnt= cnt+1;\
\};\
\cf5 Routine\cf3 (\{while(\{win.isClosed.not\}, \{usr.refresh; (1/25).wait\})\}).play(\cf5 AppClock\cf3 );\
win.front;\
)\
\
\
\cf2 //----------------------\cf3 \
\
\cf2 //--back to sound feedback\cf3 \
(\
\cf5 SynthDef\cf3 (\cf4 "feed09"\cf3 , \{\cf5 |freq= 600, amp= 0.4, fbamp= 100, atk= 0.01, rel= 0.1, delayTime= 0.05|\cf3 \
	\cf5 var\cf3  env, src, local;\
	local= \cf5 DelayN\cf3 .ar(\cf5 LocalIn\cf3 .ar(1), 1, delayTime);\
	env= \cf5 EnvGen\cf3 .ar(\cf5 Env\cf3 .perc(atk, rel), doneAction:2);\
	src= \cf5 SinOsc\cf3 .ar(local*fbamp, \cf5 SinOsc\cf3 .ar(freq, 0, pi), amp*env);\
	\cf5 Out\cf3 .ar(0, \cf5 Pan2\cf3 .ar(src, 0));\
	\cf5 LocalOut\cf3 .ar(src);\
\}).memStore;	\cf2 //memStore tells the sequencer the arguments\cf3 \
)\
\cf5 Synth\cf3 (\cf4 "feed09"\cf3 )\
\cf5 Synth\cf3 (\cf4 "feed09"\cf3 , [\cf6 \\freq\cf3 , 800, \cf6 \\rel\cf3 , 0.9, \cf6 \\fbamp\cf3 , 200])\
\cf5 Synth\cf3 (\cf4 "feed09"\cf3 , [\cf6 \\freq\cf3 , 80, \cf6 \\atk\cf3 , 0, \cf6 \\rel\cf3 , 1.9, \cf6 \\fbamp\cf3 , 900])\
\cf5 Synth\cf3 (\cf4 "feed09"\cf3 , [\cf6 \\freq\cf3 , 400, \cf6 \\atk\cf3 , 1, \cf6 \\rel\cf3 , 1, \cf6 \\fbamp\cf3 , 100])\
\cf5 Synth\cf3 (\cf4 "feed09"\cf3 , [\cf6 \\freq\cf3 , 140, \cf6 \\atk\cf3 , 0.01, \cf6 \\rel\cf3 , 0.2, \cf6 \\fbamp\cf3 , 1000, \cf6 \\delayTime\cf3 , 0.001])\
\cf5 Synth\cf3 (\cf4 "feed09"\cf3 , [\cf6 \\freq\cf3 , 140, \cf6 \\atk\cf3 , 0.01, \cf6 \\rel\cf3 , 0.2, \cf6 \\fbamp\cf3 , 1000, \cf6 \\delayTime\cf3 , 0.0001])\
\
\
\
\cf2 //----------------------\cf3 \
\
\cf2 //something new to finish with... patterns\cf3 \
\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 ).play\
\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 , \cf5 Pbind\cf3 (\cf6 \\instrument\cf3 , \cf4 "feed09"\cf3 , \cf6 \\freq\cf3 , \cf5 Pseq\cf3 ([200, 400, 500, 500, 500], \cf5 inf\cf3 ), \cf6 \\dur\cf3 , 0.5))\
\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 , \cf5 Pbind\cf3 (\cf6 \\instrument\cf3 , \cf4 "feed09"\cf3 , \cf6 \\freq\cf3 , \cf5 Pseq\cf3 ([200, 400, 500, 500, 500], \cf5 inf\cf3 ), \cf6 \\dur\cf3 , \cf5 Pseq\cf3 ([0.5, 0.5, 0.5, 0.25, 0.25], \cf5 inf\cf3 )))\
\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 , \cf5 Pbind\cf3 (\cf6 \\instrument\cf3 , \cf4 "feed09"\cf3 , \cf6 \\freq\cf3 , \cf5 Pseq\cf3 ([200, 400, 500, 500, 500], \cf5 inf\cf3 ), \cf6 \\dur\cf3 , \cf5 Pseq\cf3 ([0.5, 0.5, 0.5, 0.25, 0.25], \cf5 inf\cf3 ), \cf6 \\amp\cf3 , \cf5 Pseq\cf3 ([0.1, 0.1, 0.4, 0, 0.1], \cf5 inf\cf3 ), \cf6 \\rel\cf3 , \cf5 Pseq\cf3 ([0.1, 0.1, 0.1, 0.8], \cf5 inf\cf3 ), \cf6 \\fbamp\cf3 , \cf5 Pseq\cf3 ([900, 500, 2000], \cf5 inf\cf3 )))\
\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 , \cf5 Pbind\cf3 (\cf6 \\instrument\cf3 , \cf4 "feed09"\cf3 , \cf6 \\freq\cf3 , \cf5 Pseq\cf3 ([200, 400, 500, 500, 500], \cf5 inf\cf3 ), \cf6 \\dur\cf3 , \cf5 Pseq\cf3 ([0.5, 0.5, 0.5, 0.25, 0.25], \cf5 inf\cf3 )*0.5, \cf6 \\amp\cf3 , \cf5 Pseq\cf3 ([0.1, 0.1, 0.4, 0, 0.1], \cf5 inf\cf3 ), \cf6 \\rel\cf3 , \cf5 Pseq\cf3 ([0.1, 0.1, 0.1, 0.8], \cf5 inf\cf3 ), \cf6 \\fbamp\cf3 , \cf5 Pseq\cf3 ([900, 500, 2000], \cf5 inf\cf3 ), \cf6 \\delayTime\cf3 , \cf5 Pseq\cf3 ([0.05, 0.005], \cf5 inf\cf3 )))\
\
(\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 , \cf5 Pbind\cf3 (\cf6 \\instrument\cf3 , \cf4 "feed09"\cf3 ,\
	\cf6 \\freq\cf3 , \cf5 Pseq\cf3 ([100, 200, 300, \cf5 Prand\cf3 ([1000, 2000, 3000, 4000], 1)], \cf5 inf\cf3 ),\
	\cf6 \\dur\cf3 , \cf5 Pseq\cf3 ([0.5, 0.5, 0.5, \cf5 Pseq\cf3 ([0.125, 0.125, 0.125, 0.125], 1)], \cf5 inf\cf3 ),\
	\cf6 \\amp\cf3 , 0.3,\
	\cf6 \\rel\cf3 , \cf5 Pseq\cf3 ([0.2, 0.6, 0.2, \cf5 Pseq\cf3 ([0.01, 0.001, 0.02, 0.04], 1)], \cf5 inf\cf3 ),\
	\cf6 \\fbamp\cf3 , \cf5 Pseq\cf3 ([0, 500, 2000, \cf5 Pseq\cf3 ([5000, 1000, 0, 7000], 3)], \cf5 inf\cf3 ),\
	\cf6 \\delayTime\cf3 , \cf5 Pseq\cf3 ([0.05, 0.005], \cf5 inf\cf3 )\
))\
)\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 ).stop\
\
\
\cf2 //--create a simple bassdrum using the same synthdef\cf3 \
(\
\cf5 Pdef\cf3 (\cf6 \\bd\cf3 , \cf5 Pbind\cf3 (\cf6 \\instrument\cf3 , \cf4 "feed09"\cf3 ,\
	\cf6 \\dur\cf3 , 1,\
	\cf6 \\freq\cf3 , 60,\
	\cf6 \\atk\cf3 , 0.001,\
	\cf6 \\rel\cf3 , 0.4,\
	\cf6 \\fbamp\cf3 , 1500\
))\
)\
\cf5 Pdef\cf3 (\cf6 \\bd\cf3 ).play\
\
\cf2 //using Pfunc to calculate frequencies 'by hand'\cf3 \
(\
c= 0;\
\cf5 Pdef\cf3 (\cf6 \\hh\cf3 , \cf5 Pbind\cf3 (\cf6 \\instrument\cf3 , \cf4 "feed09"\cf3 ,\
	\cf6 \\dur\cf3 , 0.25,\
	\cf6 \\freq\cf3 , \cf5 Pfunc\cf3 (\{c= c+1; sin(c*0.25)*100+500\}).trace,\
	\cf6 \\atk\cf3 , 0.01,\
	\cf6 \\rel\cf3 , 0.1,\
	\cf6 \\fbamp\cf3 , 10000,\
	\cf6 \\delayTime\cf3 , 0.001,\
	\cf6 \\amp\cf3 , \cf5 Pseq\cf3 ([0.1, 0.3], \cf5 inf\cf3 )\
))\
)\
\cf5 Pdef\cf3 (\cf6 \\hh\cf3 ).play\
\
\cf5 Pdef\cf3 (\cf6 \\hh\cf3 ).stop\
\cf5 Pdef\cf3 (\cf6 \\bd\cf3 ).stop\
\
\cf2 //play them in sync\cf3 \
(\
\cf5 Pdef\cf3 (\cf6 \\hh\cf3 ).play(quant:4);\
\cf5 Pdef\cf3 (\cf6 \\bd\cf3 ).play(quant:4);\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 ).play(quant:4);\
)\
\
(\
\cf5 Pdef\cf3 (\cf6 \\seq\cf3 ).stop;\
\cf5 Pdef\cf3 (\cf6 \\bd\cf3 ).stop;\
\cf5 Pdef\cf3 (\cf6 \\hh\cf3 ).stop;\
)\
\
\
\cf2 //hand in pieces/sketches before 16th jul\cf3 \
\cf2 //one piece of code per document.\cf3 \
\cf2 //make it run with select all and add a comment with your name\
}